<?php

/**
 * @file
 * Defines necessary menu's, Permissions, block_token form.
 */


use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;

use Drupal\block\Entity\Block;


define('BLOCK_TOKEN_SEPARATOR', ':');


/**
 * Implements hook_help().
 */
function block_token_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.block_token':
      $output = 'hello';


      $filepath = dirname(__FILE__) . '/README.txt';
      $readme = file_get_contents($filepath);
      if (!isset($readme)) {
        return NULL;
      }
      if (\Drupal::moduleHandler()->moduleExists('markdown')) {
        $filters = \Drupal::moduleHandler()->invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];
        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;


  }
}

/**
 * Renders the block.
 *
 * @param string $module
 *   Module name.
 * @param string $delta
 *   Block delta.
 *
 * @return string
 *   Rendered block.
 */
function block_token_block_render($bid) {

  // $block = block_load($module, $delta);
  // foreach (array('region', 'title') as $key) {
  //   $block->{$key} = '';
  // }
  // $block = _block_render_blocks(array($block));
  // $block = _block_get_renderable_array($block);
  // return drupal_render($block);
  return "render block";

     $block = \Drupal\block\Entity\Block::load($bid);
//   $block = \Drupal\block_content\Entity\BlockContent::load($bid);
// $render = \Drupal::entityManager()->
//   getViewBuilder('block_content')->view($block);
// return $render;



$render = \Drupal::entityManager()->
  getViewBuilder('block_content')->view($block);
return $render;

}

/**
 * Blocks with tokens.
 *
 * @param string $token
 *   Token name.
 *
 * @return array|bool
 *   If token name provided boolean indicating whether it is on or not
 *   otherwise the list of blocks with tokens.
 */
function block_token_blocks($token = NULL) {
  static $block_token;

  if (is_null($block_token)) {
    $block_token = array();

    // Select all the name fields from the config table  starting with block.block
    //
    //

    $blocks = \Drupal::database()->select('config', 'b')
      ->fields('b', array('name'))
      ->condition('name', db_like("block.block") . '%' , 'LIKE' )

      ->execute();

      foreach ($blocks as $block) {

      $bid = explode('.', $block->name)[2];

      $block = \Drupal\block\Entity\Block::load($bid);

      $module = end($block->getDependencies()['module']);


// $render = \Drupal::entityManager()->
//   getViewBuilder('block_content')->view($block);
// return $render;

      $block_token[block_token_token_name($module, $bid)] = $block;

    }


  if (!is_null($token)) {
    return !empty($block_token[$token]);
    }
  }

  return $block_token;

}

/**
 * Implements hook_token_info().
 */
function block_token_token_info() {
  $tokens = array();

  $blocks = block_token_blocks();
  foreach ($blocks as $token => $block) {
    $module = end($block->getDependencies()['module']);
    $name = t('Block from module %module with id %delta', array(
      '%module' => $module,
      '%delta' => $block->getOriginalId(),
    ));
    $tokens[$token] = array(
      'name' => $name,
      'description' => $name,
    );
  }

  return array(
    'types' => array(
      'block_token' => array(
        'name' => t("Block Token"),
        'description' => t("Tokens containing blocks."),
      ),
    ),
    'tokens' => array(
      'block_token' => $tokens,
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function block_token_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ('block_token' == $type) {
    foreach ($tokens as $token => $original) {
      $replacement = '';

      if (block_token_blocks($token)) {
        list($module, $delta) = explode(BLOCK_TOKEN_SEPARATOR, $token, 2);
        $replacement = block_token_block_render($delta);
      }

      $replacements[$original] = $replacement;
    }
  }

  return $replacements;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function block_token_form_block_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (\Drupal::currentUser()->hasPermission('administer block classes')) {






    /** @var \Drupal\block\BlockInterface $block */
    $block = $form_state->getFormObject()->getEntity();


    // This will automatically be saved in the third party settings.
    $form['third_party_settings']['#tree'] = TRUE;
    $form['third_party_settings']['block_token']['token_value'] = array(
      '#type' => 'checkbox',
      '#title' => t('Create the token for this block'),
      '#description' => t('Token string is not available until the block is saved.'),
      '#default_value' => $block->getThirdPartySetting('block_token', 'token_value'),
      // '#default_value' => isset($block->getThirdPartySetting('block_token', 'token_value')) ? $block->getThirdPartySetting('block_token', 'token_value') : '',
    );



    $block_module = end($block->getDependencies()['module']);
    $original_id = $block->getOriginalId();

    // if (!is_null($block->delta)) {
    if (!$block->getThirdPartySetting('block_token', 'token_value')) {
      $token = "hello 123";
      // $token = block_token_token_name($original_id);

      $form['token_settings']['block_token']['token_value']['#description'] = t('Token will be @token', array(
        '@token' => sprintf('[block_token:%s]', $token),
      ));
    }

  }
// dpm("block");
//     dpm($block);

}

/**
 * Creates the token string.
 *
 * @param string $module
 *   Module name.
 * @param string $delta
 *   Block delta.
 *
 * @return string
 *   Token name.
 */
function block_token_token_name($module, $block_id) {
  // @todo use machine_name if available
  return $module . BLOCK_TOKEN_SEPARATOR . $block_id;
}




/**
 * Implements hook_preprocess_HOOK().
 */
function block_token_preprocess_block(&$variables) {
  // Blocks coming from page manager widget does not have id.
  if (!empty($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    if ($classes = $block->getThirdPartySetting('block_token', 'tokens')) {
      $variables['attributes']['class'][] = $classes;
    }
  }
}



// /**
//  * Implements hook_form_alter().
//  *
//  * Alter block edit form to add configuration field.
//  */
// function block_token_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

// if($form_id == 'block_content_basic_form' || $form_id == 'block_form') {



// //  if (user_access('administer block token') && (('block_admin_configure' == $form_id) || ('block_add_block_form' == $form_id))) {
// //    $block = block_load($form['module']['#value'], $form['delta']['#value']);
// //
//     $form['settings']['block_token'] = array(
//       '#type' => 'checkbox',
//       '#title' => t('Create the token for this block'),
//       '#description' => t('Token string is not available until the block is saved.'),
// //      '#default_value' => isset($block->block_token) ? $block->block_token : '',
//     );
// //
// //    if (!is_null($block->delta)) {
// //      $token = block_token_token_name($block->module, $block->delta);
// //      $form['settings']['block_token']['#description'] = t('Token will be @token', array(
// //        '@token' => sprintf('[block_token:%s]', $token),
// //      ));
// //    }
// //
//    // $form['#submit'][] = 'block_token_form_submit';
// //  }
//  $form['actions']['submit']['#submit'][] = end($form['actions']['submit']['#submit']);
//  $form['actions']['submit']['#submit'][1] = 'block_token_form_submit';
// }
//  dpm($form);

// }

// /**
//  * Submit callback.
//  */
// function block_token_form_submit(array &$form, FormStateInterface $form_state) {




//    print '<pre>'; print_r("this"); print '</pre>';
//    // print '<pre>'; print_r($this); print '</pre>';exit;
//  print '<pre>'; print_r($form_state); print '</pre>';exit;
// //
// //  print '<pre>'; print_r("form state"); print '</pre>';
// //  print '<pre>'; print_r($form_state); print '</pre>';
// //  dpm("form state");
// //  dpm($form_state->getValues());exit;
// //  $values = $form_state['values'];
// //  if (isset($values['block_token'])) {
// //    // Execute the query only when value changes.
// //    if ($form['settings']['block_token']['#default_value'] != $values['block_token']) {
// //      db_update('block')
// //        ->fields(array('block_token' => $values['block_token']))
// //        ->condition('module', $values['module'])
// //        ->condition('delta', $values['delta'])
// //        ->execute();
// //
// //      // Flush all filter module cache to use the updated block_token values.
// //      // @todo flush token caches that prevent new token from displaying.
// //      cache_clear_all('*', 'cache_filter', TRUE);
// //    }
// //  }
// }
