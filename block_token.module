<?php

/**
 * @file
 * Defines necessary menu's, Permissions, block_token form.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;

use Drupal\block\Entity\Block;

define('BLOCK_TOKEN_SEPARATOR', ':');

/**
 * Implements hook_help().
 */
function block_token_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.block_token':
      $output = 'hello';


      $filepath = dirname(__FILE__) . '/README.txt';
      $readme = file_get_contents($filepath);
      if (!isset($readme)) {
        return NULL;
      }
      if (\Drupal::moduleHandler()->moduleExists('markdown')) {
        $filters = \Drupal::moduleHandler()->invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];
        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;


  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function block_token_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ( $form_id == 'block_content_basic_form') {
    if (\Drupal::currentUser()->hasPermission('administer block classes')) {

      /** @var \Drupal\block\BlockInterface $block */
      // $block = $form_state->getFormObject()->getEntity();

      // // This will automatically be saved in the third party settings.
      $form['third_party_settings']['#tree'] = TRUE;
      $form['third_party_settings']['block_token']['tokens'] = array(
        '#type' => 'textfield',
        '#title' => t('Block token(s)'),
        '#description' => t('Customize the styling of this block by adding CSS classes. Separate multiple classes by spaces.'),
        // '#default_value' => $block->getThirdPartySetting('block_token', 'tokens'),
      );

    }
  }
  elseif ( $form_id == 'block_form') {
    if (\Drupal::currentUser()->hasPermission('administer block classes')) {

      /** @var \Drupal\block\BlockInterface $block */
      $block = $form_state->getFormObject()->getEntity();

      // This will automatically be saved in the third party settings.
      $form['third_party_settings']['#tree'] = TRUE;
      $form['third_party_settings']['block_token']['tokens'] = array(
        '#type' => 'textfield',
        '#title' => t('Block token(s)'),
        '#description' => t('Customize the styling of this block by adding CSS classes. Separate multiple classes by spaces.'),
        '#default_value' => $block->getThirdPartySetting('block_token', 'tokens'),
      );

    }
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function block_token_preprocess_block(&$variables) {
  // Blocks coming from page manager widget does not have id.
  if (!empty($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    if ($classes = $block->getThirdPartySetting('block_token', 'tokens')) {
      $variables['attributes']['class'][] = $classes;
    }
  }
}



// /**
//  * Implements hook_form_alter().
//  *
//  * Alter block edit form to add configuration field.
//  */
// function block_token_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

// if($form_id == 'block_content_basic_form' || $form_id == 'block_form') {

//  dpm("form id");
//  dpm($form_id);


// //  if (user_access('administer block token') && (('block_admin_configure' == $form_id) || ('block_add_block_form' == $form_id))) {
// //    $block = block_load($form['module']['#value'], $form['delta']['#value']);
// //
//     $form['settings']['block_token'] = array(
//       '#type' => 'checkbox',
//       '#title' => t('Create the token for this block'),
//       '#description' => t('Token string is not available until the block is saved.'),
// //      '#default_value' => isset($block->block_token) ? $block->block_token : '',
//     );
// //
// //    if (!is_null($block->delta)) {
// //      $token = block_token_token_name($block->module, $block->delta);
// //      $form['settings']['block_token']['#description'] = t('Token will be @token', array(
// //        '@token' => sprintf('[block_token:%s]', $token),
// //      ));
// //    }
// //
//    // $form['#submit'][] = 'block_token_form_submit';
// //  }
//  $form['actions']['submit']['#submit'][] = end($form['actions']['submit']['#submit']);
//  $form['actions']['submit']['#submit'][1] = 'block_token_form_submit';
// }
//  dpm($form);

// }

// /**
//  * Submit callback.
//  */
// function block_token_form_submit(array &$form, FormStateInterface $form_state) {




//    print '<pre>'; print_r("this"); print '</pre>';
//    // print '<pre>'; print_r($this); print '</pre>';exit;
//  print '<pre>'; print_r($form_state); print '</pre>';exit;
// //
// //  print '<pre>'; print_r("form state"); print '</pre>';
// //  print '<pre>'; print_r($form_state); print '</pre>';
// //  dpm("form state");
// //  dpm($form_state->getValues());exit;
// //  $values = $form_state['values'];
// //  if (isset($values['block_token'])) {
// //    // Execute the query only when value changes.
// //    if ($form['settings']['block_token']['#default_value'] != $values['block_token']) {
// //      db_update('block')
// //        ->fields(array('block_token' => $values['block_token']))
// //        ->condition('module', $values['module'])
// //        ->condition('delta', $values['delta'])
// //        ->execute();
// //
// //      // Flush all filter module cache to use the updated block_token values.
// //      // @todo flush token caches that prevent new token from displaying.
// //      cache_clear_all('*', 'cache_filter', TRUE);
// //    }
// //  }
// }
